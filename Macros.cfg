
# CASELIGHT
# _White_Leds_On - Case_White_leds
# Case_Status_Off - all off
# _CASELIGHT_ON - Status_Ready
# _CASELIGHT_OFF - Status_Idle
# Status_Ready - white and rainbows
# _Status_Idle - Logo rainbows only
# _Status_Part_Ready
# _Status_Busy
# _Status_Heating
# _Status_Cooling
# _Status_Leveling
# _Status_Homing
# _Status_Cleaning
# _Status_Meshing
# _Status_Calibrating_Z
# _Status_Printing


# _Toolhead_Logo_leds_off
# Toolhead_Nozzle_leds_on
# _Toolhead_Nozzle_leds_off

# Toolhead_Status_Ready
# Toolhead_Status_Off
# _Toolhead_Status_Busy
# _Toolhead_Status_Heating
# _Toolhead_Status_Leveling
# _Toolhead_Status_Homing
# _Toolhead_Status_Cleaning
# _Toolhead_Status_Meshing
# _Toolhead_Status_Calibrating_z
# _Toolhead_Status_Printing

#####################################################################
#   A better print_start macro for Trident
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set FILAMENT_TYPE = params.MATERIAL|default('ABS')|string %}         # Pull material from Slicer
  {% set bed_type = params.BED_TYPE|default('Textured PEI Plate')|string %}  # High Temp Plate = Smooth PEI / Textured PEI Plate = Textured PEI Plate
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    SET_DISPLAY_TEXT MSG="Print Started"      # Displays info
    RESPOND TYPE=echo MSG="Print Started"

  Status_Ready
  _Status_Busy
  _Toolhead_Status_Busy

  M141 S{target_chamber}       # Sets exhaust fan and Chamber targets
  _CG28                        # Full home (XYZ)
  G90                          # Absolute position

  BED_MESH_CLEAR               # Clear old saved bed mesh (if any)

  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling the Bed"               # Display info on display

  _CZTA                                                 # G28 in macro / Level the printer via Z_TILT_ADJUST

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed Heating to {target_bed}c"           # Displays info
    RESPOND TYPE=echo MSG="Bed Heating to {target_bed}c"

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M106 S255                                           # Turn on the PT-fan

    _Status_Heating                                     # Set LEDs to heating-mode
    _Toolhead_Status_Heating
    M190 S{target_bed}                                  # Set the target temp for the bed

    SET_DISPLAY_TEXT MSG="Bed Reached {target_bed}c"    # Displays info
    G4 P5000                                            # Waits 5 seconds (in miliseconds) for the bedtemp to stabilize
    
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display

    Chamber_Temp_ABS
    
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    _Status_Heating                                     # Set LEDs to heating-mode
    _Toolhead_Status_Heating
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  M141 S{target_chamber}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  _Status_Heating                                       # Set LEDs to heating-mode
  _Toolhead_Status_Heating
  SET_DISPLAY_TEXT MSG="Hotend Heating to 150c"         # Displays info
  RESPOND TYPE=echo MSG="Hotend Heating to 150c"
  M109 S150                                             # Heats the nozzle to 150c

  BED_MESH_PROFILE LOAD=default
  
  RESPOND TYPE=echo MSG="Home Z Again for Thermal Compensation"
  _Status_Calibrating_Z
  _Toolhead_Status_Calibrating_Z
  G28 Z                                                 # Homes Z again
 
  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  _Status_Heating                                       # Set LEDs to heating-mode
  _Toolhead_Status_Heating
  
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M106 S0                                               # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brrrrâ€¦."           # Display info on display
  _Status_Printing                                      # Set LEDs to printing-mode
  _Toolhead_Status_Printing
  
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
description: End the Print
gcode:
    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-1.0 F1500                 # retract filament
    G91                            # relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    # move nozzle to remove stringing
    TURN_OFF_HEATERS
    _Status_Cooling
    Toolhead_Status_Ready

    M141 S40                       # pull Chamber temp down to 40*C
    M107                           # turn off part cooling fan
#    _Status_Cleaning
#    CLEAN_NOZZLE                  # Call nozzle cleaning macro
    G1 Z10 F3000                   # move bed down 5mm
    G90                            # absolute positioning
    G0  X10 Y248 F3600             # park nozzle at left rear
    M84                            # Turn of motors
    SET_DISPLAY_TEXT MSG="Th-Th-That's All Folks"          # Displays info
    RESPOND TYPE=echo MSG="Print End"

    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
    
    Toolhead_Status_Off            # Turn off the SB LEDs
    _Status_Part_Ready             # Party Lights
    G4 P120000                     # Play Party for 2 minutes
    _Status_Idle
    BED_MESH_CLEAR

#####################################################################
#   Homes and Tilts and Stuff
#####################################################################

[gcode_macro G32]
description: Home with lights and stuff
gcode:
    Status_Ready
    BED_MESH_CLEAR
    _Toolhead_Status_Homing
    _Status_Homing
    G28
    _Status_Leveling
    _Toolhead_Status_Leveling
    Z_TILT_ADJUST
    G28 Z
    G0 X125 Y125 Z30 F3600
    Status_Ready
    Toolhead_Status_Ready

[gcode_macro _CG28]
description: Conditional Home
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        Status_Ready
        _Status_Homing
        _Toolhead_Status_Homing
        G28
        Status_Ready
        Toolhead_Status_Ready
    {% endif %}

[gcode_macro _CZTA]
description: Conditional Z_Tilt_Adjust
gcode:
    {% if not printer.z_tilt.applied %} 
        SET_DISPLAY_TEXT MSG="Conditional Z Tilt Adjust"      # Displays info
        RESPOND TYPE=echo MSG="Conditional Z Tilt Adjust"

        _Status_Leveling                                 # Party Lights
        _Toolhead_Status_Leveling
        
        Z_TILT_ADJUST                                # Levels the buildplate via QGL
        Status_Ready
        Toolhead_Status_Ready
        
    {% endif %}

[gcode_macro Z_TILT_ADJUST]
description: Z_TILT_ADJUST Replacement
rename_existing: _Z_TILT_ADJUST
gcode:
    _CG28
    _Status_Leveling                                 # Party Lights
    _Toolhead_Status_Leveling
    
    #SAVE_GCODE_STATE NAME=STATE_Z_TILT
    BED_MESH_CLEAR
    
  #  {% if not printer.z_tilt.applied %}
     # _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1
    #{% endif %}
    
    _Z_TILT_ADJUST
    
    #RESTORE_GCODE_STATE NAME=STATE_Z_TILT
    
    _Status_Calibrating_Z
    _Toolhead_Status_Calibrating_z
    
    G28 Z
    Status_Ready
    Toolhead_Status_Ready

###################################
# 	Pause / Resume / Cancel - Used with BTT Filament sensor
#   https://docs.vorondesign.com/community/howto/samwiseg0/btt_smart_filament_sensor.html
###################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the Print
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        Status_Ready
        Toolhead_Status_Ready

        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
        
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
description: Resume the Print
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
        
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        _Status_Printing
        _Toolhead_Status_Printing
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the Print
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    Status_Ready
    Toolhead_Status_Ready

[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:

    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0

###################################
# 	M600 (Filament Change) Alias
#   https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/040d31c6daaed23c2a1a353545e7ee442a232f32/articles/useful_macros.md
###################################

[gcode_macro M600]
description: This allows your pause to work natively with slicers that insert M600 for color changes. This just calls the pause macro (below).
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

###################################
#   From: https://github.com/claudermilk/TridentBackup/blob/master/macros.cfg
#   show remaining time
###################################

[display_template _printing_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

###################################
#   Load / Unload from: https://github.com/jordanruthe/KlipperScreen/blob/master/docs/macros.md
###################################

[gcode_macro FILAMENT_LOAD]
description: Load Filament
gcode:
  Status_Ready
  
  _Status_Heating
  _Toolhead_Status_Heating
  M104 S150
  
  _CG28
  
  Status_Ready       # Party Lights
  Toolhead_Status_Ready
  
  PARK_FRONT

  _Status_Heating
  _Toolhead_Status_Heating
  M109 S250              # set temp to 250 and wait    
  Status_Ready
  Toolhead_Status_Ready
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E50 F350 # purge
  G1 E-1 F350
  M82
    # RESTORE_GCODE_STATE NAME=load_state
    
[gcode_macro LOAD_FILAMENT]
description: Load Filament
gcode:
  Status_Ready
  
  _Status_Heating
  _Toolhead_Status_Heating
  M104 S150
  
  _CG28
  
  Status_Ready       # Party Lights
  Toolhead_Status_Ready
  
  PARK_FRONT

  _Status_Heating
  _Toolhead_Status_Heating
  M109 S250              # set temp to 250 and wait    
  Status_Ready
  Toolhead_Status_Ready
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E50 F350 # purge
  G1 E-1 F350
  M82
    # RESTORE_GCODE_STATE NAME=load_state
    
[gcode_macro FILAMENT_UNLOAD]
description: UnLoad Filament
gcode:
  Status_Ready
  
  _Status_Heating
  _Toolhead_Status_Heating
  M104 S150
  
  _CG28
  
  Status_Ready       # Party Lights
  Toolhead_Status_Ready
  
  PARK_FRONT

  _Status_Heating
  _Toolhead_Status_Heating
  M109 S250              # set temp to 250 and wait    
  Status_Ready
  Toolhead_Status_Ready
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=unload_state
    G91
    M83                   # Put the extruder into relative mode
    G92 E0
    G1 E10 F300 # purge
    G1 E-50 F500 # fast-unload
    G1 E-50 F500 # fast-unload
    M82
    # RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro UNLOAD_FILAMENT]
description: UnLoad Filament
gcode:
  Status_Ready
  
  _Status_Heating
  _Toolhead_Status_Heating
  M104 S150
  
  _CG28
  
  Status_Ready       # Party Lights
  Toolhead_Status_Ready
  
  PARK_FRONT

  _Status_Heating
  _Toolhead_Status_Heating
  M109 S250              # set temp to 250 and wait    
  Status_Ready
  Toolhead_Status_Ready
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=unload_state
    G91
    M83                   # Put the extruder into relative mode
    G92 E0
    G1 E10 F300 # purge
    G1 E-50 F500 # fast-unload
    G1 E-50 F500 # fast-unload
    M82
    # RESTORE_GCODE_STATE NAME=unload_state

###################################
# 	Park Front for nozzle change
###################################

# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/parking.html
[gcode_macro PARK_FRONT]
description: Park Toolhead at the front to Change Filament
gcode:

    _CG28
    SAVE_GCODE_STATE NAME=Park_Front
    G90                               ; absolute positioning

    _Toolhead_Status_Busy
    _Status_Busy

    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/3} F5000        
    RESTORE_GCODE_STATE NAME=Park_Front

    Status_Ready
    Toolhead_Status_Ready

#################################
#   Heat Soak Code
#   from: https://klipper.discourse.group/t/interruptible-heat-soak/1552
#################################

[gcode_macro CENTER]
description: Move Toolhead to Centered Position
gcode:
    _CG28

    _Toolhead_Status_Busy
    _Status_Busy
    
    G0 X125 Y125 F3500
#    Party_Off

[gcode_macro HEAT_SOAK]
description: Heats the Bed for a While

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:

    {% set TARGET = params.TARGET | default(105) | float %}
    {% set DURATION = (params.DURATION | default(60) | int) * 60 %} ## minutes to seconds
    
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    CENTER

    M141 S55                   # Set chamber to 55*C

    _Status_Heating
    _Toolhead_Status_Heating
    # fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    M106 S250                  # Set part cooling fan to full speed, helps circulate Chamber air
    M84                       # turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_DISPLAY_TEXT MSG="Heat Soak Canceled"           # Displays info
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    Status_Ready
    Toolhead_Status_Ready


[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
            M141 S35 # Set chamber to 35*C
            _Status_Idle
 
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}
    
###################################
## 	Chamber Temp Control
##  https://github.com/zellneralex/klipper_config/blob/master/fan.cfg
##  https://github.com/claudermilk/TridentBackup/blob/master/fans.cfg
###################################

[gcode_macro M141]
description: Set Temperature of Chamber fan
gcode: SET_TEMPERATURE_FAN_TARGET temperature_fan=Chamber_Fan target={params.S|default(0)}

#################################
#   Print Start Heat Soaks
#################################

[gcode_macro Chamber_Temp_ABS]
variable_tempchamber: 45

description: Set temperature of Chamber fan to a higher value
gcode:

  RESPOND TYPE=echo MSG="Heat Soak Chamber to {tempchamber}c for ABS"   # Displays info
  SET_DISPLAY_TEXT MSG="Heat Soak Chamber to {tempchamber}c for ABS"    # Displays info
  
  SET_TEMPERATURE_FAN_TARGET temperature_fan=Chamber_Fan target={tempchamber}
  TEMPERATURE_WAIT SENSOR="temperature_fan Chamber_Fan" MINIMUM={tempchamber}   # Waits for Chamber to reach desired temp
  
  RESPOND TYPE=echo MSG="Chamber temp to {tempchamber}c for ABS"   # Displays info
  SET_DISPLAY_TEXT MSG="Chamber temp to {tempchamber}c for ABS"    # Displays info

###################################
#   List Sensors and Heaters
###################################

[gcode_macro List_Sensors]
description: List All Sensors
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

